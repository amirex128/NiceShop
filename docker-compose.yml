version: '3.8'
services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      SA_PASSWORD: "dgd4f45ds4f5@fds#$"
      ACCEPT_EULA: "Y"
    ports:
      - "14335:1433"
    volumes:
      - sqlserver-data:/var/opt/mssql
      - ./.docker_configs/sqlserver/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

#  rabbitmq:
#    image: rabbitmq:3.12.8-management
#    ports:
#      - "15672:15672"
#      - "5672:5672"
#    networks:
#      - app-network

#  elasticsearch:
#    image: elasticsearch:8.11.1
#    ports:
#      - "9200:9200"
#      - "9300:9300"
#    environment:
#      discovery.type: single-node
#      xpack.security.enabled: "false"
#    networks:
#      - app-network
  
#  apm-server:
#    image: docker.elastic.co/apm/apm-server:8.11.1
#    ports:
#      - "8200:8200"
#    networks:
#      - app-network
#    cap_add: [ "CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID" ]
#    cap_drop: [ "ALL" ]
#    environment:
#      - output.elasticsearch.hosts=["elasticsearch:9200"]
#    command: >
#      apm-server -e
#         -E apm-server.rum.enabled=true
#         -E setup.kibana.host=kibana:5601
#         -E setup.template.settings.index.number_of_replicas=0
#         -E apm-server.kibana.enabled=true
#         -E apm-server.kibana.host=kibana:5601
#         -E output.elasticsearch.hosts=["elasticsearch:9200"]
#  kibana:
#    image: kibana:8.11.1
#    ports:
#      - "5601:5601"
#    networks:
#      - app-network
#    environment:
#      ELASTICSEARCH_HOSTS: http://elasticsearch:9200

  redis:
    image: redis:7.2.3
    ports:
      - "6379:6379"
    networks:
      - app-network

  seq:
    image: datalust/seq:latest
    environment:
      ACCEPT_EULA: "Y"
    ports:
      - "5342:80"
      - "5341:5341"
    networks:
      - app-network

#  web:
#    build:
#      context: ./src/Web
#      dockerfile: Dockerfile
#    depends_on:
#      - sqlserver
#      - rabbitmq
#      - elasticsearch
#      - redis
#      - seq
#    ports:
#      - "8000:8080"
#    networks:
#      - app-network

#  consumer:
#    build:
#      context: ./src/Consumers
#      dockerfile: Dockerfile
#    depends_on:
#      - sqlserver
#      - rabbitmq
#      - redis
#      - seq
#    networks:
#      - app-network

volumes:
  sqlserver-data:

networks:
  app-network: